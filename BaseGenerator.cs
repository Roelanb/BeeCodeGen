using Dapper;
using Npgsql;
using System.Collections.Generic;
using System.Linq;

namespace CodeGen;

public abstract class BaseGenerator
{
    protected const string Version = "1.0.0";
    protected readonly NpgsqlConnection _connection;

    protected BaseGenerator(NpgsqlConnection connection)
    {
        _connection = connection;
    }

    protected string GenerateFileHeader()
    {
        var currentTime = DateTime.Now.ToString("dddd, MMMM d, yyyy HH:mm:ss");
        return $@"// <auto-generated>
// Generated by CodeGen Generator v{Version}
// Generation Time: {currentTime}
// </auto-generated>

";
    }

    public static string ToPascalCase(string name)
    {
        var words = name.Split('_');
        return string.Join("", words.Select(word => char.ToUpper(word[0]) + word[1..].ToLower()));
    }

    protected static object GetTestValue(string sqlType, int? characterLength)
    {
        return sqlType switch
        {
            "integer" => 123,
            "bigint" => 123456789L,
            "smallint" => 12,
            "boolean" => true,
            "text" or "character varying" => new string('A', characterLength ?? 255),
            "numeric" or "decimal" => 123.45m,
            "timestamp" or "timestamp with time zone" => DateTime.Now,
            "date" => DateOnly.FromDateTime(DateTime.Now),
            "time" => TimeOnly.FromDateTime(DateTime.Now),
            _ => "UnknownType"
        };
    }

    protected static string ToCamelCase(string name)
    {
        var words = name.Split('_');
        return string.Join("", words.Select((word, index) =>
            index == 0 ? word.ToLower() : char.ToUpper(word[0]) + word[1..].ToLower()));
    }

    protected TableDefinition ExtractTableDefinition(string schema, string tableName)
    {
        const string sql = @"
            SELECT DISTINCT ON (c.column_name)
                   c.column_name, 
                   c.data_type, 
                   c.character_maximum_length as character_length,
                   c.is_nullable,
                   COALESCE(
                       (SELECT 'YES'
                        FROM pg_index i
                        JOIN pg_attribute a ON a.attnum = ANY(i.indkey)
                         AND a.attrelid = i.indrelid
                        WHERE i.indrelid = (quote_ident(@schema) || '.' || quote_ident(@tableName))::regclass
                          AND i.indisprimary
                          AND a.attname = c.column_name),
                       'NO') AS is_primary_key
            FROM information_schema.columns c
            WHERE c.table_schema = @schema
              AND c.table_name = @tableName
            ORDER BY c.column_name, c.ordinal_position";

        var columns = _connection.Query<ColumnDefinition>(sql, new { schema, tableName }).ToList();

        foreach (var column in columns)
        {
            column.TestValue = GetTestValue(column.data_type!, column.character_length);
        }

        var result = new TableDefinition
        {
            TableName = tableName,
            TableSchema = schema,
            Columns = columns
        };
        return result;
    }

    protected string GetCSharpType(string sqlType)
    {
        return sqlType switch
        {
            "integer" => "int",
            "bigint" => "long",
            "smallint" => "short",
            "boolean" => "bool",
            "text" or "character varying" => "string",
            "numeric" or "decimal" => "decimal",
            "timestamp" or "timestamp with time zone" => "DateTime",
            "date" => "DateOnly",
            "time" => "TimeOnly",
            _ => "object"
        };
    }

    protected class TableDefinition
    {
        public string? TableName { get; set; }
        public string? TableSchema { get; set; }

        public List<ColumnDefinition>? Columns { get; set; }

        public ColumnDefinition? PrimaryKey => Columns?.FirstOrDefault(c => c.is_primary_key == "YES");

        public string ApiPrimaryKeyParameterUrl => $"{string.Join("/", Columns!.Where(c => c.is_primary_key == "YES").Select(c => c.TestValue))}";
    }
    protected class ColumnDefinition
    {
        public string? column_name { get; set; }
        public string? data_type { get; set; }
        public int? character_length { get; set; }
        public string? is_nullable { get; set; }
        public string? is_primary_key { get; set; }
        public object? TestValue { get; set; }
    }
}
